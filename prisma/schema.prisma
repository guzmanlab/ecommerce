// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId String
    user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    @@map("examples")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String?
    email         String?   @unique
    username      String?
    emailVerified DateTime? @map("email_verified")
    image         String?
    bio           String?   @db.Text
    password      String?

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @map("updated_at")

    examples Example[]
    accounts Account[]
    sessions Session[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
